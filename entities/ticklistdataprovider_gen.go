package entities

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *TickListDataProvider) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "ticks")
		return
	}
	if cap(z.ticks) >= int(zb0002) {
		z.ticks = (z.ticks)[:zb0002]
	} else {
		z.ticks = make([]Tick, zb0002)
	}
	for za0001 := range z.ticks {
		err = z.ticks[za0001].DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "ticks", za0001)
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TickListDataProvider) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ticks)))
	if err != nil {
		err = msgp.WrapError(err, "ticks")
		return
	}
	for za0001 := range z.ticks {
		err = z.ticks[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "ticks", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TickListDataProvider) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ticks)))
	for za0001 := range z.ticks {
		o, err = z.ticks[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "ticks", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TickListDataProvider) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "ticks")
		return
	}
	if cap(z.ticks) >= int(zb0002) {
		z.ticks = (z.ticks)[:zb0002]
	} else {
		z.ticks = make([]Tick, zb0002)
	}
	for za0001 := range z.ticks {
		bts, err = z.ticks[za0001].UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "ticks", za0001)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TickListDataProvider) Msgsize() (s int) {
	s = 1 + msgp.ArrayHeaderSize
	for za0001 := range z.ticks {
		s += z.ticks[za0001].Msgsize()
	}
	return
}
