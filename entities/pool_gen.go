package entities

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/KyberNetwork/pancake-v3-sdk/constants"
	"github.com/daoleno/uniswap-sdk-core/entities"
	"github.com/daoleno/uniswap-sdk-core/msgpencode"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Pool) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 9 {
		err = msgp.ArrayError{Wanted: 9, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Token0")
			return
		}
		z.Token0 = nil
	} else {
		if z.Token0 == nil {
			z.Token0 = new(entities.Token)
		}
		err = z.Token0.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "Token0")
			return
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Token1")
			return
		}
		z.Token1 = nil
	} else {
		if z.Token1 == nil {
			z.Token1 = new(entities.Token)
		}
		err = z.Token1.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "Token1")
			return
		}
	}
	{
		var zb0002 uint64
		zb0002, err = dc.ReadUint64()
		if err != nil {
			err = msgp.WrapError(err, "Fee")
			return
		}
		z.Fee = constants.FeeAmount(zb0002)
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "SqrtRatioX96")
			return
		}
		z.SqrtRatioX96 = nil
	} else {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeInt(z.SqrtRatioX96))
			if err != nil {
				err = msgp.WrapError(err, "SqrtRatioX96")
				return
			}
			z.SqrtRatioX96 = msgpencode.DecodeInt(zb0003)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Liquidity")
			return
		}
		z.Liquidity = nil
	} else {
		{
			var zb0004 []byte
			zb0004, err = dc.ReadBytes(msgpencode.EncodeInt(z.Liquidity))
			if err != nil {
				err = msgp.WrapError(err, "Liquidity")
				return
			}
			z.Liquidity = msgpencode.DecodeInt(zb0004)
		}
	}
	z.TickCurrent, err = dc.ReadInt()
	if err != nil {
		err = msgp.WrapError(err, "TickCurrent")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "TickDataProvider")
			return
		}
		z.TickDataProvider = nil
	} else {
		if z.TickDataProvider == nil {
			z.TickDataProvider = new(TickDataProviderWrapper)
		}
		err = z.TickDataProvider.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "TickDataProvider")
			return
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "token0Price")
			return
		}
		z.token0Price = nil
	} else {
		if z.token0Price == nil {
			z.token0Price = new(entities.Price)
		}
		err = z.token0Price.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "token0Price")
			return
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "token1Price")
			return
		}
		z.token1Price = nil
	} else {
		if z.token1Price == nil {
			z.token1Price = new(entities.Price)
		}
		err = z.token1Price.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "token1Price")
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Pool) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 9
	err = en.Append(0x99)
	if err != nil {
		return
	}
	if z.Token0 == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Token0.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Token0")
			return
		}
	}
	if z.Token1 == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Token1.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Token1")
			return
		}
	}
	err = en.WriteUint64(uint64(z.Fee))
	if err != nil {
		err = msgp.WrapError(err, "Fee")
		return
	}
	if z.SqrtRatioX96 == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.SqrtRatioX96))
		if err != nil {
			err = msgp.WrapError(err, "SqrtRatioX96")
			return
		}
	}
	if z.Liquidity == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.Liquidity))
		if err != nil {
			err = msgp.WrapError(err, "Liquidity")
			return
		}
	}
	err = en.WriteInt(z.TickCurrent)
	if err != nil {
		err = msgp.WrapError(err, "TickCurrent")
		return
	}
	if z.TickDataProvider == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.TickDataProvider.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "TickDataProvider")
			return
		}
	}
	if z.token0Price == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.token0Price.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "token0Price")
			return
		}
	}
	if z.token1Price == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.token1Price.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "token1Price")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Pool) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 9
	o = append(o, 0x99)
	if z.Token0 == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Token0.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Token0")
			return
		}
	}
	if z.Token1 == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Token1.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Token1")
			return
		}
	}
	o = msgp.AppendUint64(o, uint64(z.Fee))
	if z.SqrtRatioX96 == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.SqrtRatioX96))
	}
	if z.Liquidity == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.Liquidity))
	}
	o = msgp.AppendInt(o, z.TickCurrent)
	if z.TickDataProvider == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.TickDataProvider.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "TickDataProvider")
			return
		}
	}
	if z.token0Price == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.token0Price.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "token0Price")
			return
		}
	}
	if z.token1Price == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.token1Price.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "token1Price")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Pool) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 9 {
		err = msgp.ArrayError{Wanted: 9, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Token0 = nil
	} else {
		if z.Token0 == nil {
			z.Token0 = new(entities.Token)
		}
		bts, err = z.Token0.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "Token0")
			return
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Token1 = nil
	} else {
		if z.Token1 == nil {
			z.Token1 = new(entities.Token)
		}
		bts, err = z.Token1.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "Token1")
			return
		}
	}
	{
		var zb0002 uint64
		zb0002, bts, err = msgp.ReadUint64Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Fee")
			return
		}
		z.Fee = constants.FeeAmount(zb0002)
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.SqrtRatioX96 = nil
	} else {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.SqrtRatioX96))
			if err != nil {
				err = msgp.WrapError(err, "SqrtRatioX96")
				return
			}
			z.SqrtRatioX96 = msgpencode.DecodeInt(zb0003)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Liquidity = nil
	} else {
		{
			var zb0004 []byte
			zb0004, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.Liquidity))
			if err != nil {
				err = msgp.WrapError(err, "Liquidity")
				return
			}
			z.Liquidity = msgpencode.DecodeInt(zb0004)
		}
	}
	z.TickCurrent, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "TickCurrent")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.TickDataProvider = nil
	} else {
		if z.TickDataProvider == nil {
			z.TickDataProvider = new(TickDataProviderWrapper)
		}
		bts, err = z.TickDataProvider.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "TickDataProvider")
			return
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.token0Price = nil
	} else {
		if z.token0Price == nil {
			z.token0Price = new(entities.Price)
		}
		bts, err = z.token0Price.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "token0Price")
			return
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.token1Price = nil
	} else {
		if z.token1Price == nil {
			z.token1Price = new(entities.Price)
		}
		bts, err = z.token1Price.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "token1Price")
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Pool) Msgsize() (s int) {
	s = 1
	if z.Token0 == nil {
		s += msgp.NilSize
	} else {
		s += z.Token0.Msgsize()
	}
	if z.Token1 == nil {
		s += msgp.NilSize
	} else {
		s += z.Token1.Msgsize()
	}
	s += msgp.Uint64Size
	if z.SqrtRatioX96 == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.SqrtRatioX96))
	}
	if z.Liquidity == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.Liquidity))
	}
	s += msgp.IntSize
	if z.TickDataProvider == nil {
		s += msgp.NilSize
	} else {
		s += z.TickDataProvider.Msgsize()
	}
	if z.token0Price == nil {
		s += msgp.NilSize
	} else {
		s += z.token0Price.Msgsize()
	}
	if z.token1Price == nil {
		s += msgp.NilSize
	} else {
		s += z.token1Price.Msgsize()
	}
	return
}
